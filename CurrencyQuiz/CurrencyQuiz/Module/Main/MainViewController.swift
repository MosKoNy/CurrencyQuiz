//
//  MainViewController.swift
//  CurrencyQuiz
//
//  Created by GA007295 on 26/2/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//



import RealmSwift
import UIKit
import PopupDialog
import SwiftUI

protocol MainDisplayLogic: class
{
    func displayCurrentPrice(viewModel: Main.CurrentPrice.ViewModel)
}

class MainViewController: UIViewController, MainDisplayLogic
{
    var interactor: MainBusinessLogic?
    var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var timerLabel: UILabel!
    @IBOutlet weak var selectCurrencyUIButton: UIButton!
    @IBOutlet weak var FromCurrencyUILabel: UILabel!
    @IBOutlet weak var InputCurrencyUITextField: UITextField!
    @IBOutlet weak var OutputCurrencyUILabel: UILabel!
    var itemDisplayCurrencyPrice:[CurrentPriceModel] = []
    let realm = try! Realm()
    var timer = Timer()
    var timeCircle = 0
    var currencyType: CurrencyType? {
        didSet {
            self.FromCurrencyUILabel.text = "\(currencyType?.rawValue ?? "") to"
            self.InputCurrencyUITextField.text = nil
            self.OutputCurrencyUILabel.text = "0"
        }
    }
    
    enum CurrencyType:String {
        case usd = "USD"
        case gbp = "GBP"
        case eur = "EUR"
    }
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = MainInteractor()
        let presenter = MainPresenter()
        let router = MainRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        initView()
        currencyType = CurrencyType.usd
        getStorageCurrencyPrice()
    }
    
    func initView() {
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow(notification:)), name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide(notification:)), name: UIResponder.keyboardWillHideNotification, object: nil)
        self.hideKeyboardWhenTappedAround()
    }
    
    func startAndResumeTimer() {
        timer = Timer.scheduledTimer(timeInterval: 1.0, target: self, selector: #selector(setUpCountdownTimer), userInfo: nil, repeats: true)
    }
    
    func pauseTimer() {
        timer.invalidate()
    }
    
    @objc func setUpCountdownTimer() {
        if (timeCircle == 0) {
            getCurrencyPrice()
            timeCircle = 60
        } else {
            timeCircle = timeCircle - 1
        }
        timerLabel.text = "\(timeCircle)"
    }
    
    func getCurrencyPrice()
    {
        let request = Main.CurrentPrice.Request()
        interactor?.getCurrentPrice(request: request)
    }
    
    func displayCurrentPrice(viewModel: Main.CurrentPrice.ViewModel)
    {
        let insertRealm = viewModel.currencyPrice
        try! self.realm.write {
            self.realm.add(insertRealm)
        }
        
        itemDisplayCurrencyPrice.insert(viewModel.currencyPrice, at: 0)
        tableView.reloadData()
    }
    
    func getStorageCurrencyPrice() {
        do {
            let currencyPriceList = try! realm.objects(CurrentPriceModel.self).sorted(byKeyPath: "_id", ascending: false)
            if (currencyPriceList.count > 0) {
                itemDisplayCurrencyPrice.insert(contentsOf: currencyPriceList, at: 0)
            }
        } catch let error as NSError {
            popupAlert(message: error.description)
        }
        
        tableView.reloadData()
        if(!timer.isValid) {
            startAndResumeTimer()
        }
    }
    
    func popupAlert(title:String? = "Error !!!", message:String? = "") {
        let popup = PopupDialog(title: title, message: message)
        let buttonOne = CancelButton(title: "Close") {
            
        }
        popup.addButtons([buttonOne])
        self.present(popup, animated: true, completion: nil)
    }
    
    func popupDeleteItem(indexPath: IndexPath) {
        let popup = PopupDialog(title: "Delete !!!", message: "Want to to delete Currency Item ?")
        let buttonOne = CancelButton(title: "Cancel") {
            
        }
        
        let buttonTwo = DefaultButton(title: "Delete", dismissOnTap: true) {
            let row = indexPath.row
            let item = self.itemDisplayCurrencyPrice[row]
            // Delete the instance from the realm.
            try! self.realm.write {
                self.realm.delete(item)
            }
            
            self.itemDisplayCurrencyPrice.remove(at: row)
            self.tableView.reloadData()
        }
        buttonTwo.titleColor = UIColor.red
        
        popup.addButtons([buttonOne, buttonTwo])
        self.present(popup, animated: true, completion: nil)
    }
    
    @objc func keyboardWillShow(notification: NSNotification) {
        if let keyboardSize = (notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue)?.cgRectValue {
            self.view.frame.origin.y -= keyboardSize.height
        }
    }

    @objc func keyboardWillHide(notification: NSNotification) {
        self.view.frame.origin.y = 0
    }
    
    // MARK: Action
    @IBAction func SelectCurrencyAction(_ sender: Any) {
        let popup = PopupDialog(title: "Select Currency to convert", message: "Current use \(currencyType?.rawValue ?? "")")
        let buttonOne = CancelButton(title: "Cancel") {
            
        }
        let buttonTwo = DefaultButton(title: CurrencyType.usd.rawValue, dismissOnTap: true) {
            self.currencyType = CurrencyType.usd
        }
        let buttonThree = DefaultButton(title: CurrencyType.eur.rawValue, dismissOnTap: true) {
            self.currencyType = CurrencyType.eur
        }
        let buttonFour = DefaultButton(title: CurrencyType.gbp.rawValue, dismissOnTap: true) {
            self.currencyType = CurrencyType.gbp
        }
        popup.addButtons([buttonOne,buttonTwo,buttonThree,buttonFour])
        self.present(popup, animated: true, completion: nil)
    }
    
    @IBAction func InputCurrencyAction(_ sender: UITextField) {
        if (sender.text?.count ?? 0 < 1) {
            self.OutputCurrencyUILabel.text = "\(0)"
        } else {
            print(sender.text?.last)
        }
    }
    
    func convertCoin(value: String) -> String {
        guard let itemConvert = try itemDisplayCurrencyPrice.first else {
            return "service not ready !!"
        }
        var returnValue = 0.0
        switch (currencyType) {
        case .usd:
            returnValue = (Double(value) ?? 0) / stringToCurrencyDouble(value: itemConvert.bpi?.usd?.rate ?? "")
        case .eur:
            returnValue = (Double(value) ?? 0) / stringToCurrencyDouble(value: itemConvert.bpi?.eur?.rate ?? "")
        case .gbp:
            returnValue = (Double(value) ?? 0) / stringToCurrencyDouble(value: itemConvert.bpi?.gbp?.rate ?? "")
        case .none:
            return "0"
        }
        return "\(returnValue)"
    }
    
    func stringToCurrencyDouble(value: String) -> Double {
        return Double(value.replacingOccurrences(of: ",", with: "")) ?? 0
    }
}

extension MainViewController: UITextFieldDelegate {
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        if (string == ".") {
            if (textField.text?.filter({ $0 == "."}).count ?? 0 > 0) {
                return false
            } else {
                OutputCurrencyUILabel.text = convertCoin(value: "\(textField.text ?? "")\(string)")
                return true
            }
        } else {
            OutputCurrencyUILabel.text = convertCoin(value: "\(textField.text ?? "")\(string)")
            return true
        }
    }
}

extension MainViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return itemDisplayCurrencyPrice.count
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let headerCell = tableView.dequeueReusableCell(withIdentifier: "CurrencyPriceHeaderTableViewCell") as! CurrencyPriceHeaderTableViewCell
        return headerCell
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "CurrencyPriceTableViewCell", for: indexPath) as! CurrencyPriceTableViewCell
        let itemSelect = itemDisplayCurrencyPrice[indexPath.row]
        let itemDisplay = CurrencyPriceTableViewCell.Data(firstCurrency: itemSelect.bpi?.usd?.rate ?? "-",
                                                          secondCurrency: itemSelect.bpi?.gbp?.rate ?? "-",
                                                          thirdCurrency: itemSelect.bpi?.eur?.rate ?? "-",
                                                          dateTimeString: itemSelect.time?.updatedISO ?? "-")
        cell.setupData(data: itemDisplay)
        return cell
    }
    
    func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {
        if editingStyle == .delete {
            self.popupDeleteItem(indexPath: indexPath)
        }
    }
}
